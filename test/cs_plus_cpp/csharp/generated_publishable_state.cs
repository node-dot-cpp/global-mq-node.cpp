//////////////////////////////////////////////////////////////
//
//  Do not edit! file automatically generated by idl_compiler
//
//////////////////////////////////////////////////////////////

using globalmq.marshalling;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;

namespace basic_test
{

	//////////////////////////////////////////////////////////////
	//
	//                 Structures
	//
	//////////////////////////////////////////////////////////////

//**********************************************************************
// DISCRIMINATED_UNION "HtmlTextOrTags" Targets: (2 cases)
//  CASE text (1 parameters)(1 parameters)
//    1. CHARACTER_STRING str (REQUIRED)
//  CASE taglists (1 parameters)(1 parameters)
//    1. VECTOR< STRUCT HtmlTag> tags (REQUIRED)
//**********************************************************************

	public enum HtmlTextOrTags_variants
	{
		text = 21,
		taglists = 22,
		unknown
	}
	public interface IHtmlTextOrTags : IEquivalenceComparable<IHtmlTextOrTags>
	{
		HtmlTextOrTags_variants currentVariant();
		void setCurrentVariant(HtmlTextOrTags_variants v);

		// IDL CASE text:
		String str { get; set; }

		// IDL CASE taglists:
		IList<IHtmlTag> tags { get; set; }
	} // interface IHtmlTextOrTags

	public class HtmlTextOrTags : IHtmlTextOrTags, IEquatable<HtmlTextOrTags>
	{
		Object mem;

		public override bool Equals(object obj)
		{
			return Equals(obj as HtmlTextOrTags);
		}
		public static bool operator ==(HtmlTextOrTags left, HtmlTextOrTags right)
		{
			if (ReferenceEquals(left, right))
				return true;
			else if (ReferenceEquals(left, null))
				return false;
			else if (ReferenceEquals(null, right))
				return false;
			else
				return left.Equals(right);
		}
		public static bool operator !=(HtmlTextOrTags left, HtmlTextOrTags right)
		{
			return !(left == right);
		}
		public override int GetHashCode()
		{
			// TODO
			throw new InvalidOperationException();
		}
		public bool Equals(HtmlTextOrTags other)
		{
			if (ReferenceEquals(this, other))
				return true;
			else if (ReferenceEquals(null, other))
				return false;
			else
				return this.mem.Equals(other.mem);
		}
		public bool isEquivalent(IHtmlTextOrTags other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else if (currentVariant() != other.currentVariant())
				return false;
			else
			{
				switch(currentVariant())
				{
				case HtmlTextOrTags_variants.text:
					return
						this.str == other.str;
				case HtmlTextOrTags_variants.taglists:
					return
						EquivalenceComparer.areEquivalent(this.tags, other.tags);
				default: return true; // both unknown
				}
			}
		}
		public HtmlTextOrTags_variants currentVariant()
		{
			if(this.mem == null)
				return HtmlTextOrTags_variants.unknown;
			else if(this.mem is CASE_text)
				return HtmlTextOrTags_variants.text;
			else if(this.mem is CASE_taglists)
				return HtmlTextOrTags_variants.taglists;
			else
				return HtmlTextOrTags_variants.unknown;
		}
		public void setCurrentVariant(HtmlTextOrTags_variants v)
		{
			switch(v)
			{
			case HtmlTextOrTags_variants.text:
				this.mem = new CASE_text();
				break;
			case HtmlTextOrTags_variants.taglists:
				this.mem = new CASE_taglists();
				break;
			default:
				this.mem = null;
				break;
			}
		}

		// IDL CASE text:
		public String str
		{
			get { return ((CASE_text)this.mem).str; }
			set { ((CASE_text)this.mem).str = value; }
		}

		// IDL CASE taglists:
		public IList<IHtmlTag> tags
		{
			get { return ((CASE_taglists)this.mem).tags; }
			set { ((CASE_taglists)this.mem).tags = value; }
		}

		// IDL CASE text:
		public class CASE_text : IEquatable<CASE_text>
		{
			String _str = String.Empty;
			public String str
			{
				get { return _str; }
				set
				{
					if(value == null)
						throw new ArgumentNullException();
					_str = value;
				}
			}
			public CASE_text() { }
			public CASE_text(String str)
			{
				this.str = str;
			}
			public override bool Equals(object obj)
			{
				return Equals(obj as CASE_text);
			}
			public static bool operator ==(CASE_text left, CASE_text right)
			{
				if (ReferenceEquals(left, right))
					return true;
				else if (ReferenceEquals(left, null))
					return false;
				else if (ReferenceEquals(null, right))
					return false;
				else
					return left.Equals(right);
			}
			public static bool operator !=(CASE_text left, CASE_text right)
			{
				return !(left == right);
			}
			public override int GetHashCode()
			{
				// TODO
				throw new InvalidOperationException();
			}
			public bool Equals(CASE_text other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						this.str == other.str;
			}
		} // class CASE_text


		// IDL CASE taglists:
		public class CASE_taglists : IEquatable<CASE_taglists>
		{
			List<IHtmlTag> _tags = new List<IHtmlTag>();
			public IList<IHtmlTag> tags
			{
				get { return _tags; }
				set
				{
					if(value == null)
						throw new ArgumentNullException();
					List<IHtmlTag> tmp = (List<IHtmlTag>)value;
					tmp.ForEach((IHtmlTag each) => { if(!(each is HtmlTag)) throw new InvalidCastException(); });
					_tags = tmp;
				}
			}
			public CASE_taglists() { }
			public CASE_taglists(IList<IHtmlTag> tags)
			{
				this.tags = tags;
			}
			public override bool Equals(object obj)
			{
				return Equals(obj as CASE_taglists);
			}
			public static bool operator ==(CASE_taglists left, CASE_taglists right)
			{
				if (ReferenceEquals(left, right))
					return true;
				else if (ReferenceEquals(left, null))
					return false;
				else if (ReferenceEquals(null, right))
					return false;
				else
					return left.Equals(right);
			}
			public static bool operator !=(CASE_taglists left, CASE_taglists right)
			{
				return !(left == right);
			}
			public override int GetHashCode()
			{
				// TODO
				throw new InvalidOperationException();
			}
			public bool Equals(CASE_taglists other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						Enumerable.SequenceEqual(this.tags, other.tags);
			}
		} // class CASE_taglists

	} // class HtmlTextOrTags

	public class HtmlTextOrTags_readonly : IHtmlTextOrTags
	{
		protected IHtmlTextOrTags _data;
		public HtmlTextOrTags_readonly(IHtmlTextOrTags data) { this._data = data; }
		public HtmlTextOrTags_variants currentVariant() { return this._data.currentVariant(); }
		public void setCurrentVariant(HtmlTextOrTags_variants v) { throw new InvalidOperationException(); }

		// IDL CASE text:
		public String str
		{
			get { return this._data.str; }
			set { throw new InvalidOperationException(); }
		}

		// IDL CASE taglists:
		public IList<IHtmlTag> tags
		{
			get { return new VectorWrapper<IHtmlTag>(this._data.tags, (IHtmlTag t) => { return new HtmlTag_readonly(t); }); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(IHtmlTextOrTags other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
	} // class HtmlTextOrTags_readonly

	public interface IHtmlTag : IEquivalenceComparable<IHtmlTag>
	{
		String name { get; set; }
		IList<IProperty> properties { get; set; }
		IHtmlTextOrTags tags { get; set; }
	} // interface HtmlTag

	public class HtmlTag : IHtmlTag, IEquatable<HtmlTag>
	{
		String _name = String.Empty;
		public String name
		{
			get { return _name; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_name = value;
			}
		}
		List<IProperty> _properties = new List<IProperty>();
		public IList<IProperty> properties
		{
			get { return _properties; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				List<IProperty> tmp = (List<IProperty>)value;
				tmp.ForEach((IProperty each) => { if(!(each is Property)) throw new InvalidCastException(); });
				_properties = tmp;
			}
		}
		HtmlTextOrTags _tags = new HtmlTextOrTags();
		public IHtmlTextOrTags tags
		{
			get { return _tags; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_tags = (HtmlTextOrTags)value;
			}
		}
		public HtmlTag() { }
		public HtmlTag(String name, IList<IProperty> properties, IHtmlTextOrTags tags)
		{
			this.name = name;
			this.properties = properties;
			this.tags = tags;
		}
		public override bool Equals(object obj)
		{
			return Equals(obj as HtmlTag);
		}
		public static bool operator ==(HtmlTag left, HtmlTag right)
		{
			if (ReferenceEquals(left, right))
				return true;
			else if (ReferenceEquals(left, null))
				return false;
			else if (ReferenceEquals(null, right))
				return false;
			else
				return left.Equals(right);
		}
		public static bool operator !=(HtmlTag left, HtmlTag right)
		{
			return !(left == right);
		}
		public override int GetHashCode()
		{
			// TODO
			throw new InvalidOperationException();
		}
		public bool Equals(HtmlTag other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.name == other.name &&
					Enumerable.SequenceEqual(this.properties, other.properties) &&
					this.tags.Equals(other.tags);
		}
		public bool isEquivalent(IHtmlTag other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.name == other.name &&
					EquivalenceComparer.areEquivalent(this.properties, other.properties) &&
					this.tags.isEquivalent(other.tags);
		}
	} // class HtmlTag

	public class HtmlTag_readonly : IHtmlTag
	{
		protected IHtmlTag _data;
		public HtmlTag_readonly(IHtmlTag data) { this._data = data; }
		public String name
		{
			get { return this._data.name; }
			set { throw new InvalidOperationException(); }
		}
		public IList<IProperty> properties
		{
			get { return new VectorWrapper<IProperty>(this._data.properties, (IProperty t) => { return new Property_readonly(t); }); }
			set { throw new InvalidOperationException(); }
		}
		public IHtmlTextOrTags tags
		{
			get { return new HtmlTextOrTags_readonly(this._data.tags); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(IHtmlTag other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
	} // class HtmlTag_readonly

	public interface IProperty : IEquivalenceComparable<IProperty>
	{
		String name { get; set; }
		String value { get; set; }
	} // interface Property

	public class Property : IProperty, IEquatable<Property>
	{
		String _name = String.Empty;
		public String name
		{
			get { return _name; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_name = value;
			}
		}
		String _value = String.Empty;
		public String value
		{
			get { return _value; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_value = value;
			}
		}
		public Property() { }
		public Property(String name, String value)
		{
			this.name = name;
			this.value = value;
		}
		public override bool Equals(object obj)
		{
			return Equals(obj as Property);
		}
		public static bool operator ==(Property left, Property right)
		{
			if (ReferenceEquals(left, right))
				return true;
			else if (ReferenceEquals(left, null))
				return false;
			else if (ReferenceEquals(null, right))
				return false;
			else
				return left.Equals(right);
		}
		public static bool operator !=(Property left, Property right)
		{
			return !(left == right);
		}
		public override int GetHashCode()
		{
			// TODO
			throw new InvalidOperationException();
		}
		public bool Equals(Property other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.name == other.name &&
					this.value == other.value;
		}
		public bool isEquivalent(IProperty other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.name == other.name &&
					this.value == other.value;
		}
	} // class Property

	public class Property_readonly : IProperty
	{
		protected IProperty _data;
		public Property_readonly(IProperty data) { this._data = data; }
		public String name
		{
			get { return this._data.name; }
			set { throw new InvalidOperationException(); }
		}
		public String value
		{
			get { return this._data.value; }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(IProperty other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
	} // class Property_readonly

	//////////////////////////////////////////////////////////////
	//
	//                 Messages
	//
	//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//
//  Scopes:
//
//  scope_test_exchange
//  {
//    cl_request
//    srv_response
//  }
//
//////////////////////////////////////////////////////////////

	public class scope_test_exchange
	{
		public enum MsgId
		{
			cl_request = 2,
			srv_response = 3
		}

		public static JsonMessageHandler makeMessageHandler( MsgId id, JsonMessageHandler.HandlerDelegate handler )
		{
			return new JsonMessageHandler((ulong)id, handler);
		}
		public static JsonMessageHandler makeDefaultMessageHandler( JsonMessageHandler.HandlerDelegate handler)
		{
			return new JsonMessageHandler(JsonMessageHandler.DefaultHandler, handler);
		}
		public static void handleMessage( BufferT buffer, params JsonMessageHandler[] handlers )
		{
			handleMessage(buffer.getReadIterator(), handlers);
		}
		public static void handleMessage( ReadIteratorT riter, params JsonMessageHandler[] handlers )
		{
			JsonParser parser = new JsonParser( riter );
			JsonMessageHandler.handle( parser, handlers );
		}

		public interface Icl_request : IEquivalenceComparable<Icl_request>
		{
			Int64 ordinal { get; set; }
			String text_to_server { get; set; }
		} // interface cl_request

		public class cl_request : Icl_request, IEquatable<cl_request>
		{
			public Int64 ordinal { get; set; }
			String _text_to_server = String.Empty;
			public String text_to_server
			{
				get { return _text_to_server; }
				set
				{
					if(value == null)
						throw new ArgumentNullException();
					_text_to_server = value;
				}
			}
			public cl_request() { }
			public cl_request(Int64 ordinal, String text_to_server)
			{
				this.ordinal = ordinal;
				this.text_to_server = text_to_server;
			}
			public override bool Equals(object obj)
			{
				return Equals(obj as cl_request);
			}
			public static bool operator ==(cl_request left, cl_request right)
			{
				if (ReferenceEquals(left, right))
					return true;
				else if (ReferenceEquals(left, null))
					return false;
				else if (ReferenceEquals(null, right))
					return false;
				else
					return left.Equals(right);
			}
			public static bool operator !=(cl_request left, cl_request right)
			{
				return !(left == right);
			}
			public override int GetHashCode()
			{
				// TODO
				throw new InvalidOperationException();
			}
			public bool Equals(cl_request other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						this.ordinal == other.ordinal &&
						this.text_to_server == other.text_to_server;
			}
			public bool isEquivalent(Icl_request other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						this.ordinal == other.ordinal &&
						this.text_to_server == other.text_to_server;
			}
		} // class cl_request

		public class cl_request_message
		{
			public static void compose(JsonComposer composer, Int64 ordinal, String text_to_server)
			{
				composer.append( "{\n  ");
				composer.addNamePart("ordinal");
				composer.composeSignedInteger(ordinal);
				composer.append( ",\n  " );
				composer.addNamePart("text_to_server");
				composer.composeString(text_to_server);
				composer.append( "\n}" );
			}
			public static void compose(GmqComposer composer, Int64 ordinal, String text_to_server)
			{
				composer.composeSignedInteger(ordinal);
				composer.composeString(text_to_server);
			}
			public static void compose(JsonComposer composer, Icl_request val)
			{
				compose(composer, val.ordinal, val.text_to_server);
			}
			public static void compose(GmqComposer composer, Icl_request val)
			{
				compose(composer, val.ordinal, val.text_to_server);
			}
			public static void parse(JsonParser parser, Icl_request val)			{
				parser.skipDelimiter( '{' );
				while (true)
				{
					string key;
					parser.readKeyFromJson( out key );
					if ( key == "ordinal" )
					{
						Int64 tmp;
						parser.parseSignedInteger(out tmp);
						val.ordinal = tmp;
					}
					else if ( key == "text_to_server" )
					{
						String tmp;
						parser.parseString(out tmp);
						val.text_to_server = tmp;
					}

					parser.skipSpacesEtc();
					if ( parser.isDelimiter( ',' ) )
					{
						parser.skipDelimiter( ',' );
						continue;
					}
					if ( parser.isDelimiter( '}' ) )
					{
						parser.skipDelimiter( '}' );
						break;
					}
					throw new FormatException(); // bad format
				}
			}
			public static void parse(GmqParser parser, Icl_request val)
			{
			{
				Int64 tmp;
				parser.parseSignedInteger(out tmp);
				val.ordinal = tmp;
			}
			{
				String tmp;
				parser.parseString(out tmp);
				val.text_to_server = tmp;
			}
			}
		} // class cl_request_message

		public static void composeMessage_cl_request(BufferT buffer, Int64 ordinal, String text_to_server)
		{
			JsonComposer composer = new JsonComposer(buffer);

			composer.append("{\n  ");
			composer.addNamePart("msgid");
			composer.composeUnsignedInteger((UInt64)MsgId.cl_request);
			composer.append(",\n  ");
			composer.addNamePart("msgbody");
			cl_request_message.compose(composer, ordinal, text_to_server);
			composer.append("\n}");
		}

		public static cl_request parseMessage_cl_request(JsonParser parser)
		{
			cl_request tmp = new cl_request();
			cl_request_message.parse(parser, tmp);
			return tmp;
		}
		public interface Isrv_response : IEquivalenceComparable<Isrv_response>
		{
			Int64 replied_on { get; set; }
			Int64 value { get; set; }
			String text_from_server { get; set; }
		} // interface srv_response

		public class srv_response : Isrv_response, IEquatable<srv_response>
		{
			public Int64 replied_on { get; set; }
			public Int64 value { get; set; }
			String _text_from_server = String.Empty;
			public String text_from_server
			{
				get { return _text_from_server; }
				set
				{
					if(value == null)
						throw new ArgumentNullException();
					_text_from_server = value;
				}
			}
			public srv_response() { }
			public srv_response(Int64 replied_on, Int64 value, String text_from_server)
			{
				this.replied_on = replied_on;
				this.value = value;
				this.text_from_server = text_from_server;
			}
			public override bool Equals(object obj)
			{
				return Equals(obj as srv_response);
			}
			public static bool operator ==(srv_response left, srv_response right)
			{
				if (ReferenceEquals(left, right))
					return true;
				else if (ReferenceEquals(left, null))
					return false;
				else if (ReferenceEquals(null, right))
					return false;
				else
					return left.Equals(right);
			}
			public static bool operator !=(srv_response left, srv_response right)
			{
				return !(left == right);
			}
			public override int GetHashCode()
			{
				// TODO
				throw new InvalidOperationException();
			}
			public bool Equals(srv_response other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						this.replied_on == other.replied_on &&
						this.value == other.value &&
						this.text_from_server == other.text_from_server;
			}
			public bool isEquivalent(Isrv_response other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						this.replied_on == other.replied_on &&
						this.value == other.value &&
						this.text_from_server == other.text_from_server;
			}
		} // class srv_response

		public class srv_response_message
		{
			public static void compose(JsonComposer composer, Int64 replied_on, Int64 value, String text_from_server)
			{
				composer.append( "{\n  ");
				composer.addNamePart("replied_on");
				composer.composeSignedInteger(replied_on);
				composer.append( ",\n  " );
				composer.addNamePart("value");
				composer.composeSignedInteger(value);
				composer.append( ",\n  " );
				composer.addNamePart("text_from_server");
				composer.composeString(text_from_server);
				composer.append( "\n}" );
			}
			public static void compose(GmqComposer composer, Int64 replied_on, Int64 value, String text_from_server)
			{
				composer.composeSignedInteger(replied_on);
				composer.composeSignedInteger(value);
				composer.composeString(text_from_server);
			}
			public static void compose(JsonComposer composer, Isrv_response val)
			{
				compose(composer, val.replied_on, val.value, val.text_from_server);
			}
			public static void compose(GmqComposer composer, Isrv_response val)
			{
				compose(composer, val.replied_on, val.value, val.text_from_server);
			}
			public static void parse(JsonParser parser, Isrv_response val)			{
				parser.skipDelimiter( '{' );
				while (true)
				{
					string key;
					parser.readKeyFromJson( out key );
					if ( key == "replied_on" )
					{
						Int64 tmp;
						parser.parseSignedInteger(out tmp);
						val.replied_on = tmp;
					}
					else if ( key == "value" )
					{
						Int64 tmp;
						parser.parseSignedInteger(out tmp);
						val.value = tmp;
					}
					else if ( key == "text_from_server" )
					{
						String tmp;
						parser.parseString(out tmp);
						val.text_from_server = tmp;
					}

					parser.skipSpacesEtc();
					if ( parser.isDelimiter( ',' ) )
					{
						parser.skipDelimiter( ',' );
						continue;
					}
					if ( parser.isDelimiter( '}' ) )
					{
						parser.skipDelimiter( '}' );
						break;
					}
					throw new FormatException(); // bad format
				}
			}
			public static void parse(GmqParser parser, Isrv_response val)
			{
			{
				Int64 tmp;
				parser.parseSignedInteger(out tmp);
				val.replied_on = tmp;
			}
			{
				Int64 tmp;
				parser.parseSignedInteger(out tmp);
				val.value = tmp;
			}
			{
				String tmp;
				parser.parseString(out tmp);
				val.text_from_server = tmp;
			}
			}
		} // class srv_response_message

		public static void composeMessage_srv_response(BufferT buffer, Int64 replied_on, Int64 value, String text_from_server)
		{
			JsonComposer composer = new JsonComposer(buffer);

			composer.append("{\n  ");
			composer.addNamePart("msgid");
			composer.composeUnsignedInteger((UInt64)MsgId.srv_response);
			composer.append(",\n  ");
			composer.addNamePart("msgbody");
			srv_response_message.compose(composer, replied_on, value, text_from_server);
			composer.append("\n}");
		}

		public static srv_response parseMessage_srv_response(JsonParser parser)
		{
			srv_response tmp = new srv_response();
			srv_response_message.parse(parser, tmp);
			return tmp;
		}
	} // class scope_test_exchange

	//////////////////////////////////////////////////////////////
	//
	//                 Publishables
	//
	//////////////////////////////////////////////////////////////

	public class HtmlTextOrTags_subscriber : IHtmlTextOrTags
	{

		/////////////////////////////////  begin user override section /////////////////////////////////


		// IDL CASE text:

		// IDL CASE taglists:
		public virtual HtmlTag_subscriber makeElementHandler_tags(IHtmlTag data) { return new HtmlTag_subscriber(data); }
		public virtual void notifyUpdated() { }
		public virtual void notifyUpdated_CurrentVariant(HtmlTextOrTags_variants old) { }

		// IDL CASE text:
		public virtual void notifyUpdated_str(String old) { }

		// IDL CASE taglists:
		public virtual void notifyUpdated_tags() { }
		public virtual void notifyElementUpdated_tags(int index) { }
		public virtual void notifyInserted_tags(int index) { }
		public virtual void notifyErased_tags(int index, IHtmlTag oldVal) { }

		/////////////////////////////////   end user override section  /////////////////////////////////


		protected IHtmlTextOrTags _data;
		enum Address
		{
			CurrentVariant = 0,

			// IDL CASE text:
			str = 1,

			// IDL CASE taglists:
			tags = 1
		};
		public HtmlTextOrTags_subscriber(IHtmlTextOrTags data) { this._data = data ?? new HtmlTextOrTags(); }
		public HtmlTextOrTags_variants currentVariant() { return this._data.currentVariant(); }
		public void setCurrentVariant(HtmlTextOrTags_variants v) { throw new InvalidOperationException(); }
		bool update_CurrentVariant(IPublishableParser parser, String name)
		{
			HtmlTextOrTags_variants newVal = (HtmlTextOrTags_variants)parser.parseUnsigned(name);
			if (newVal != this._data.currentVariant())
			{
				HtmlTextOrTags_variants oldVal = this._data.currentVariant();
				this._data.setCurrentVariant(newVal);
				this._reset_handlers();
				notifyUpdated_CurrentVariant(oldVal);
				return true;
			}
			else
				return false;
		}

		// IDL CASE text:
		public String str
		{
			get { return this._data.str; }
			set { throw new InvalidOperationException(); }
		}
		bool update_str(IPublishableParser parser, String name)
		{
			String newVal = parser.parseString(name);
			if (newVal != this._data.str)
			{
				String oldVal = this._data.str;
				this._data.str = newVal;
				notifyUpdated_str(oldVal);
				return true;
			}
			else
				return false;
		}

		// IDL CASE taglists:
		List<IHtmlTag> tags_handlers;
		List<IHtmlTag> lazy_tags_handlers()
		{ // mb: lazy because can't call virtual 'makeElementHandler' in ctor
			if (tags_handlers == null)
			{
				tags_handlers = new List<IHtmlTag>();
				for (int i = 0; i < this._data.tags.Count; ++i)
				{
					HtmlTag_subscriber handler = makeElementHandler_tags(this._data.tags[i]);
					tags_handlers.Add(handler);
				}
				this._data.tags.Clear();
			}
			return tags_handlers;
		}
		public IList<IHtmlTag> tags
		{
			get { return new ReadOnlyCollection<IHtmlTag>(lazy_tags_handlers()); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(IHtmlTextOrTags other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
		public static void parseForStateSync(IPublishableParser parser, String expectedName, IHtmlTextOrTags data)
		{
			parser.parseKey(expectedName);
			parseForStateSync(parser, data);
		}
		public static HtmlTextOrTags parseForStateSync(IPublishableParser parser)
		{
			HtmlTextOrTags data = new HtmlTextOrTags();
			parseForStateSync(parser, data);
			return data;
		}
		static void parseForStateSync(IPublishableParser parser, IHtmlTextOrTags data)
		{
			parser.parseStructBegin();
			HtmlTextOrTags_variants newVal = (HtmlTextOrTags_variants)parser.parseUnsigned("caseId");
			data.setCurrentVariant(newVal);
				// mb: get it back from data, in case is an unknown value
				switch(data.currentVariant())
				{
					case HtmlTextOrTags_variants.text:
						CASE_text_subscriber.parseForStateSync(parser, "caseData", data);
						break;
					case HtmlTextOrTags_variants.taglists:
						CASE_taglists_subscriber.parseForStateSync(parser, "caseData", data);
						break;
					default:
						break; //TODO: actually skip any caseData
				}
			parser.parseStructEnd();
		}
		public static bool parse(IPublishableParser parser, String expectedName, HtmlTextOrTags_subscriber subscriber)
		{
			parser.parseKey(expectedName);
			return parse(parser, subscriber);
		}
		public static bool parse_notify(IPublishableParser parser, HtmlTextOrTags_subscriber subscriber)
		{
			return parse(parser, subscriber);
		}
		public static bool parse(IPublishableParser parser, HtmlTextOrTags_subscriber subscriber)
		{
			parser.parseStructBegin();
			bool changed = subscriber.update_CurrentVariant(parser, "caseId");
				switch(subscriber.currentVariant())
				{
					case HtmlTextOrTags_variants.text:
						changed = CASE_text_subscriber.parse(parser, "caseData", subscriber) | changed;
						break;
					case HtmlTextOrTags_variants.taglists:
						changed = CASE_taglists_subscriber.parse(parser, "caseData", subscriber) | changed;
						break;
					default:
						break; //TODO: actually skip any caseData
				}
			parser.parseStructEnd();
			if(changed)
				subscriber.notifyUpdated();
			return changed;
		}
		public static bool parse(IPublishableParser parser, HtmlTextOrTags_subscriber subscriber, UInt64[] addr, int offset)
		{
			bool changed = false;
			if( (Address)addr[offset] == Address.CurrentVariant)
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				changed = subscriber.update_CurrentVariant(parser, "value") | changed;
			}
			else
			{
				switch(subscriber.currentVariant())
				{
					case HtmlTextOrTags_variants.text:
						changed = CASE_text_subscriber.parse(parser, subscriber, addr, offset) | changed;
						break;
					case HtmlTextOrTags_variants.taglists:
						changed = CASE_taglists_subscriber.parse(parser, subscriber, addr, offset) | changed;
						break;
					default:
						break; //TODO: actually skip any deeper data
				}
			}
			if(changed)
				subscriber.notifyUpdated();
			return changed;
		}
		void _reset_handlers()
		{

			// IDL CASE text:

			// IDL CASE taglists:
			this.tags_handlers = null;
		}

		// IDL CASE text:
		public class CASE_text_subscriber
		{
			public static void parseForStateSync(IPublishableParser parser, String expectedName, IHtmlTextOrTags data)
			{
				parser.parseKey(expectedName);
				parseForStateSync(parser, data);
			}
			public static HtmlTextOrTags parseForStateSync(IPublishableParser parser)
			{
				HtmlTextOrTags data = new HtmlTextOrTags();
				parseForStateSync(parser, data);
				return data;
			}
			static void parseForStateSync(IPublishableParser parser, IHtmlTextOrTags data)
			{
				parser.parseStructBegin();
				data.str = parser.parseString("str");
				parser.parseStructEnd();
			}
			public static bool parse(IPublishableParser parser, String expectedName, HtmlTextOrTags_subscriber subscriber)
			{
				parser.parseKey(expectedName);
				return parse(parser, subscriber);
			}
			public static bool parse_notify(IPublishableParser parser, HtmlTextOrTags_subscriber subscriber)
			{
				return parse(parser, subscriber);
			}
			public static bool parse(IPublishableParser parser, HtmlTextOrTags_subscriber subscriber)
			{
				parser.parseStructBegin();
				bool changed = false;
				changed = subscriber.update_str(parser, "str") | changed;
				parser.parseStructEnd();
				if(changed)
					subscriber.notifyUpdated();
				return changed;
			}
			public static bool parse(IPublishableParser parser, HtmlTextOrTags_subscriber subscriber, UInt64[] addr, int offset)
			{
				bool changed = false;
				switch ((Address)addr[offset])
				{
					case Address.str:
					{
						if(addr.Length != offset + 1)
							throw new Exception();
						changed = subscriber.update_str(parser, "value") | changed;
						break;
					}
					default:
						throw new Exception();
				}
				if(changed)
					subscriber.notifyUpdated();
				return changed;
			}
		} // class CASE_text_subscriber


		// IDL CASE taglists:
		public class CASE_taglists_subscriber
		{
			public static void parseForStateSync(IPublishableParser parser, String expectedName, IHtmlTextOrTags data)
			{
				parser.parseKey(expectedName);
				parseForStateSync(parser, data);
			}
			public static HtmlTextOrTags parseForStateSync(IPublishableParser parser)
			{
				HtmlTextOrTags data = new HtmlTextOrTags();
				parseForStateSync(parser, data);
				return data;
			}
			static void parseForStateSync(IPublishableParser parser, IHtmlTextOrTags data)
			{
				parser.parseStructBegin();
				parser.parseVector2("tags", data.tags, HtmlTag_subscriber.parseForStateSync);
				parser.parseStructEnd();
			}
			public static bool parse(IPublishableParser parser, String expectedName, HtmlTextOrTags_subscriber subscriber)
			{
				parser.parseKey(expectedName);
				return parse(parser, subscriber);
			}
			public static bool parse_notify(IPublishableParser parser, HtmlTextOrTags_subscriber subscriber)
			{
				return parse(parser, subscriber);
			}
			public static bool parse(IPublishableParser parser, HtmlTextOrTags_subscriber subscriber)
			{
				parser.parseStructBegin();
				bool changed = false;
				{
					List<IHtmlTag> newVal = new List<IHtmlTag>();
					parser.parseVectorComplex("tags", newVal, HtmlTag_subscriber.parse_notify, subscriber.makeElementHandler_tags);
					if(!Enumerable.SequenceEqual(newVal, subscriber.lazy_tags_handlers()))
					{
						subscriber.tags_handlers = newVal;
						changed = true;
						subscriber.notifyUpdated_tags();
					}
				}
				parser.parseStructEnd();
				if(changed)
					subscriber.notifyUpdated();
				return changed;
			}
			public static bool parse(IPublishableParser parser, HtmlTextOrTags_subscriber subscriber, UInt64[] addr, int offset)
			{
				bool changed = false;
				switch ((Address)addr[offset])
				{
					case Address.tags:
					{
						bool currentChanged = false;
						if(addr.Length == offset + 1) // full vector replace
						{
							List<IHtmlTag> newVal = new List<IHtmlTag>();
							parser.parseVectorComplex("value", newVal, HtmlTag_subscriber.parse_notify, subscriber.makeElementHandler_tags);
							if(!Enumerable.SequenceEqual(newVal, subscriber.lazy_tags_handlers()))
							{
								subscriber.tags_handlers = newVal;
								currentChanged = true;
							}
						}
						else if(addr.Length == offset + 2) // action over one of the elements
						{
							int index = (int)addr[offset + 1];
							Publishable.ActionOnVector action = (Publishable.ActionOnVector)parser.parseActionInPublishable();
							switch (action)
							{
							case Publishable.ActionOnVector.update_at:
							{
								bool elemChanged = HtmlTag_subscriber.parse(parser, "value", (HtmlTag_subscriber)(subscriber.lazy_tags_handlers()[index]));
								if (elemChanged)
								{
									currentChanged = true;
									subscriber.notifyElementUpdated_tags(index);
								}
								break;
							}
							case Publishable.ActionOnVector.insert_single_before:
							{
								HtmlTag_subscriber handler = subscriber.makeElementHandler_tags(null);
								HtmlTag_subscriber.parse(parser, "value", handler);
								subscriber.lazy_tags_handlers().Insert(index, handler);
								currentChanged = true;
								subscriber.notifyInserted_tags(index);
								break;
							}
							case Publishable.ActionOnVector.remove_at:
							{
								IHtmlTag oldVal = subscriber.lazy_tags_handlers()[index];
								subscriber.lazy_tags_handlers().RemoveAt(index);
								currentChanged = true;
								subscriber.notifyErased_tags(index, oldVal);
								break;
							}
							default:
								throw new Exception();
							}
						}
						else if(addr.Length > offset + 2) // let child continue parsing
						{
							int index = (int)addr[offset + 1];
							currentChanged = HtmlTag_subscriber.parse(parser, (HtmlTag_subscriber)(subscriber.lazy_tags_handlers()[index]), addr, offset + 2);
							if (currentChanged)
							{
								subscriber.notifyElementUpdated_tags(index);
							}
						}
						else
							throw new Exception();

						if(currentChanged)
						{
							changed = true;
							subscriber.notifyUpdated_tags();
						}
						break;
					}
					default:
						throw new Exception();
				}
				if(changed)
					subscriber.notifyUpdated();
				return changed;
			}
		} // class CASE_taglists_subscriber

	} // class HtmlTextOrTags_subscriber

	public class HtmlTextOrTags_publisher : IHtmlTextOrTags
	{
		IHtmlTextOrTags t;
		IPublishableComposer composer;
		UInt64[] address;
		enum Address
		{
			CurrentVariant = 0,

			// IDL CASE text:
			str = 1,

			// IDL CASE taglists:
			tags = 1
		};
		public HtmlTextOrTags_publisher(IHtmlTextOrTags t, IPublishableComposer composer, UInt64[] address)
		{
			this.t = t;
			this.composer = composer;
			this.address = address;
		}
		public HtmlTextOrTags_variants currentVariant() { return t.currentVariant(); }
		public void setCurrentVariant(HtmlTextOrTags_variants v)
		{
			t.setCurrentVariant(v);
			composer.composeAddress(address, (UInt64)Address.CurrentVariant);
			composer.composeUnsigned("value", (UInt64)v, false);
			composer.composeAddressEnd();
		}

		// IDL CASE text:
		public String str
		{
			get { return t.str; }
			set
			{
				t.str = value;
				composer.composeAddress(address, (UInt64)Address.str);
				composer.composeString("value", value, false);
				composer.composeAddressEnd();
			}
		}

		// IDL CASE taglists:
		public IList<IHtmlTag> tags
		{
			get
			{
				return new PublisherVectorWrapper<IHtmlTag>(t.tags, composer,
					Publishable.makeAddress(address, (UInt64)Address.tags),
					(IPublishableComposer composer, IHtmlTag val) =>
						{ HtmlTag_publisher.compose(composer, "value", val, false); },
					(IHtmlTag val, IPublishableComposer composer, UInt64[] addr) =>
						{ return new HtmlTag_publisher(val, composer, addr); }
				);
			}
			set
			{
				t.tags = value;
				composer.composeAddress(address, (UInt64)Address.tags);
				composer.composeVector2("value", value,
					HtmlTag_publisher.compose,
					false);
				composer.composeAddressEnd();
			}
		}
		public bool isEquivalent(IHtmlTextOrTags other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return t.isEquivalent(other);
		}
		public static void compose(IPublishableComposer composer, String name, IHtmlTextOrTags val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, IHtmlTextOrTags t)
		{
			composer.composeStructBegin();
			HtmlTextOrTags_variants c = t.currentVariant();
				composer.composeUnsigned("caseId", (UInt64)c, true);
				switch(c)
				{
					case HtmlTextOrTags_variants.text:
						CASE_text_publisher.compose(composer, "caseData", t, false);
						break;
					case HtmlTextOrTags_variants.taglists:
						CASE_taglists_publisher.compose(composer, "caseData", t, false);
						break;
					default:
						break;
				}
			composer.composeStructEnd();
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(IHtmlTextOrTags data) { this.t = data; }

		// IDL CASE text:
		public class CASE_text_publisher
		{
			public static void compose(IPublishableComposer composer, String name, IHtmlTextOrTags val, bool separator)
			{
				composer.composeKey(name);
				compose(composer, val);
				composer.addSeparator(separator);
			}
			public static void compose(IPublishableComposer composer, IHtmlTextOrTags t)
			{
				composer.composeStructBegin();
				composer.composeString("str", t.str, false);
				composer.composeStructEnd();
			}
		} // class CASE_text_publisher


		// IDL CASE taglists:
		public class CASE_taglists_publisher
		{
			public static void compose(IPublishableComposer composer, String name, IHtmlTextOrTags val, bool separator)
			{
				composer.composeKey(name);
				compose(composer, val);
				composer.addSeparator(separator);
			}
			public static void compose(IPublishableComposer composer, IHtmlTextOrTags t)
			{
				composer.composeStructBegin();
				composer.composeVector2("tags", t.tags,
					HtmlTag_publisher.compose,
					false);
				composer.composeStructEnd();
			}
		} // class CASE_taglists_publisher

	} // class HtmlTextOrTags_publisher

	public class HtmlTag_subscriber : IHtmlTag
	{

		/////////////////////////////////  begin user override section /////////////////////////////////

		public virtual Property_subscriber makeElementHandler_properties(IProperty data) { return new Property_subscriber(data); }
		public virtual HtmlTextOrTags_subscriber makeHandler_tags(IHtmlTextOrTags data) { return new HtmlTextOrTags_subscriber(data); }
		public virtual void notifyUpdated() { }
		public virtual void notifyUpdated_name(String old) { }
		public virtual void notifyUpdated_properties() { }
		public virtual void notifyElementUpdated_properties(int index) { }
		public virtual void notifyInserted_properties(int index) { }
		public virtual void notifyErased_properties(int index, IProperty oldVal) { }
		public virtual void notifyUpdated_tags() { }

		/////////////////////////////////   end user override section  /////////////////////////////////


		protected IHtmlTag _data;
		enum Address
		{
			name = 0,
			properties = 1,
			tags = 2
		}
		public HtmlTag_subscriber(IHtmlTag data) { this._data = data ?? new HtmlTag(); }
		public String name
		{
			get { return this._data.name; }
			set { throw new InvalidOperationException(); }
		}
		bool update_name(IPublishableParser parser, String name)
		{
			String newVal = parser.parseString(name);
			if (newVal != this._data.name)
			{
				String oldVal = this._data.name;
				this._data.name = newVal;
				notifyUpdated_name(oldVal);
				return true;
			}
			else
				return false;
		}
		List<IProperty> properties_handlers;
		List<IProperty> lazy_properties_handlers()
		{ // mb: lazy because can't call virtual 'makeElementHandler' in ctor
			if (properties_handlers == null)
			{
				properties_handlers = new List<IProperty>();
				for (int i = 0; i < this._data.properties.Count; ++i)
				{
					Property_subscriber handler = makeElementHandler_properties(this._data.properties[i]);
					properties_handlers.Add(handler);
				}
				this._data.properties.Clear();
			}
			return properties_handlers;
		}
		public IList<IProperty> properties
		{
			get { return new ReadOnlyCollection<IProperty>(lazy_properties_handlers()); }
			set { throw new InvalidOperationException(); }
		}
		HtmlTextOrTags_subscriber tags_handler;
		HtmlTextOrTags_subscriber lazy_tags_handler()
		{ // mb: lazy because can't call virtual 'makeHandler' in ctor
			if (tags_handler == null)
				tags_handler = makeHandler_tags(this._data.tags);
			return tags_handler;
		}
		public IHtmlTextOrTags tags
		{
			get { return lazy_tags_handler(); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(IHtmlTag other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
		public static void parseForStateSync(IPublishableParser parser, String expectedName, IHtmlTag data)
		{
			parser.parseKey(expectedName);
			parseForStateSync(parser, data);
		}
		public static HtmlTag parseForStateSync(IPublishableParser parser)
		{
			HtmlTag data = new HtmlTag();
			parseForStateSync(parser, data);
			return data;
		}
		static void parseForStateSync(IPublishableParser parser, IHtmlTag data)
		{
			parser.parseStructBegin();
			data.name = parser.parseString("name");
			parser.parseVector2("properties", data.properties, Property_subscriber.parseForStateSync);
			HtmlTextOrTags_subscriber.parseForStateSync(parser, "tags", data.tags);
			parser.parseStructEnd();
		}
		public static bool parse(IPublishableParser parser, String expectedName, HtmlTag_subscriber subscriber)
		{
			parser.parseKey(expectedName);
			return parse(parser, subscriber);
		}
		public static bool parse_notify(IPublishableParser parser, HtmlTag_subscriber subscriber)
		{
			return parse(parser, subscriber);
		}
		public static bool parse(IPublishableParser parser, HtmlTag_subscriber subscriber)
		{
			parser.parseStructBegin();
			bool changed = false;
			changed = subscriber.update_name(parser, "name") | changed;
			{
				List<IProperty> newVal = new List<IProperty>();
				parser.parseVectorComplex("properties", newVal, Property_subscriber.parse_notify, subscriber.makeElementHandler_properties);
				if(!Enumerable.SequenceEqual(newVal, subscriber.lazy_properties_handlers()))
				{
					subscriber.properties_handlers = newVal;
					changed = true;
					subscriber.notifyUpdated_properties();
				}
			}
			{
				bool currentChanged = HtmlTextOrTags_subscriber.parse(parser, "tags", subscriber.lazy_tags_handler());
				if(currentChanged)
				{
						changed = true;
						subscriber.notifyUpdated_tags();
				}
			}
			parser.parseStructEnd();
			if(changed)
				subscriber.notifyUpdated();
			return changed;
		}
		public static bool parse(IPublishableParser parser, HtmlTag_subscriber subscriber, UInt64[] addr, int offset)
		{
			bool changed = false;
			switch ((Address)addr[offset])
			{
				case Address.name:
				{
					if(addr.Length != offset + 1)
						throw new Exception();
					changed = subscriber.update_name(parser, "value") | changed;
					break;
				}
				case Address.properties:
				{
					bool currentChanged = false;
					if(addr.Length == offset + 1) // full vector replace
					{
						List<IProperty> newVal = new List<IProperty>();
						parser.parseVectorComplex("value", newVal, Property_subscriber.parse_notify, subscriber.makeElementHandler_properties);
						if(!Enumerable.SequenceEqual(newVal, subscriber.lazy_properties_handlers()))
						{
							subscriber.properties_handlers = newVal;
							currentChanged = true;
						}
					}
					else if(addr.Length == offset + 2) // action over one of the elements
					{
						int index = (int)addr[offset + 1];
						Publishable.ActionOnVector action = (Publishable.ActionOnVector)parser.parseActionInPublishable();
						switch (action)
						{
						case Publishable.ActionOnVector.update_at:
						{
							bool elemChanged = Property_subscriber.parse(parser, "value", (Property_subscriber)(subscriber.lazy_properties_handlers()[index]));
							if (elemChanged)
							{
								currentChanged = true;
								subscriber.notifyElementUpdated_properties(index);
							}
							break;
						}
						case Publishable.ActionOnVector.insert_single_before:
						{
							Property_subscriber handler = subscriber.makeElementHandler_properties(null);
							Property_subscriber.parse(parser, "value", handler);
							subscriber.lazy_properties_handlers().Insert(index, handler);
							currentChanged = true;
							subscriber.notifyInserted_properties(index);
							break;
						}
						case Publishable.ActionOnVector.remove_at:
						{
							IProperty oldVal = subscriber.lazy_properties_handlers()[index];
							subscriber.lazy_properties_handlers().RemoveAt(index);
							currentChanged = true;
							subscriber.notifyErased_properties(index, oldVal);
							break;
						}
						default:
							throw new Exception();
						}
					}
					else if(addr.Length > offset + 2) // let child continue parsing
					{
						int index = (int)addr[offset + 1];
						currentChanged = Property_subscriber.parse(parser, (Property_subscriber)(subscriber.lazy_properties_handlers()[index]), addr, offset + 2);
						if (currentChanged)
						{
							subscriber.notifyElementUpdated_properties(index);
						}
					}
					else
						throw new Exception();

					if(currentChanged)
					{
						changed = true;
						subscriber.notifyUpdated_properties();
					}
					break;
				}
				case Address.tags:
				{
					bool currentChanged = false;
					if(addr.Length == offset + 1) // full element replace
						currentChanged = HtmlTextOrTags_subscriber.parse(parser, "value", subscriber.lazy_tags_handler());
					else if(addr.Length > offset + 1) // let child continue parsing
						currentChanged = HtmlTextOrTags_subscriber.parse(parser, subscriber.lazy_tags_handler(), addr, offset + 1);
					else
						throw new Exception();

					if(currentChanged)
					{
						changed = true;
						subscriber.notifyUpdated_tags();
					}
					break;
				}
				default:
					throw new Exception();
			}
			if(changed)
				subscriber.notifyUpdated();
			return changed;
		}
		public void _reset_handlers()
		{
			this.properties_handlers = null;
			this.tags_handler = null;
		}
	} // class HtmlTag_subscriber

	public class HtmlTag_publisher : IHtmlTag

	{
		IHtmlTag t;
		IPublishableComposer composer;
		UInt64[] address;
		enum Address
		{
			name = 0,
			properties = 1,
			tags = 2
		}
		public HtmlTag_publisher(IHtmlTag t, IPublishableComposer composer, UInt64[] address)
		{
			this.t = t;
			this.composer = composer;
			this.address = address;
		}
		public String name
		{
			get { return t.name; }
			set
			{
				t.name = value;
				composer.composeAddress(address, (UInt64)Address.name);
				composer.composeString("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public IList<IProperty> properties
		{
			get
			{
				return new PublisherVectorWrapper<IProperty>(t.properties, composer,
					Publishable.makeAddress(address, (UInt64)Address.properties),
					(IPublishableComposer composer, IProperty val) =>
						{ Property_publisher.compose(composer, "value", val, false); },
					(IProperty val, IPublishableComposer composer, UInt64[] addr) =>
						{ return new Property_publisher(val, composer, addr); }
				);
			}
			set
			{
				t.properties = value;
				composer.composeAddress(address, (UInt64)Address.properties);
				composer.composeVector2("value", value,
					Property_publisher.compose,
					false);
				composer.composeAddressEnd();
			}
		}
		public IHtmlTextOrTags tags
		{
			get { return new HtmlTextOrTags_publisher(t.tags, composer, Publishable.makeAddress(address, (UInt64)Address.tags)); }
			set
			{
				t.tags = value;
				composer.composeAddress(address, (UInt64)Address.tags);
				HtmlTextOrTags_publisher.compose(composer, "value", value, false);
				composer.composeAddressEnd();
			}
		}
		public bool isEquivalent(IHtmlTag other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return t.isEquivalent(other);
		}
		public static void compose(IPublishableComposer composer, String name, IHtmlTag val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, IHtmlTag t)
		{
			composer.composeStructBegin();
			composer.composeString("name", t.name, true);
			composer.composeVector2("properties", t.properties,
				Property_publisher.compose,
				true);
			HtmlTextOrTags_publisher.compose(composer, "tags", t.tags, false);
			composer.composeStructEnd();
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(IHtmlTag data) { this.t = data; }
	} // class HtmlTag_publisher

	public class Property_subscriber : IProperty
	{

		/////////////////////////////////  begin user override section /////////////////////////////////

		public virtual void notifyUpdated() { }
		public virtual void notifyUpdated_name(String old) { }
		public virtual void notifyUpdated_value(String old) { }

		/////////////////////////////////   end user override section  /////////////////////////////////


		protected IProperty _data;
		enum Address
		{
			name = 0,
			value = 1
		}
		public Property_subscriber(IProperty data) { this._data = data ?? new Property(); }
		public String name
		{
			get { return this._data.name; }
			set { throw new InvalidOperationException(); }
		}
		bool update_name(IPublishableParser parser, String name)
		{
			String newVal = parser.parseString(name);
			if (newVal != this._data.name)
			{
				String oldVal = this._data.name;
				this._data.name = newVal;
				notifyUpdated_name(oldVal);
				return true;
			}
			else
				return false;
		}
		public String value
		{
			get { return this._data.value; }
			set { throw new InvalidOperationException(); }
		}
		bool update_value(IPublishableParser parser, String name)
		{
			String newVal = parser.parseString(name);
			if (newVal != this._data.value)
			{
				String oldVal = this._data.value;
				this._data.value = newVal;
				notifyUpdated_value(oldVal);
				return true;
			}
			else
				return false;
		}
		public bool isEquivalent(IProperty other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
		public static void parseForStateSync(IPublishableParser parser, String expectedName, IProperty data)
		{
			parser.parseKey(expectedName);
			parseForStateSync(parser, data);
		}
		public static Property parseForStateSync(IPublishableParser parser)
		{
			Property data = new Property();
			parseForStateSync(parser, data);
			return data;
		}
		static void parseForStateSync(IPublishableParser parser, IProperty data)
		{
			parser.parseStructBegin();
			data.name = parser.parseString("name");
			data.value = parser.parseString("value");
			parser.parseStructEnd();
		}
		public static bool parse(IPublishableParser parser, String expectedName, Property_subscriber subscriber)
		{
			parser.parseKey(expectedName);
			return parse(parser, subscriber);
		}
		public static bool parse_notify(IPublishableParser parser, Property_subscriber subscriber)
		{
			return parse(parser, subscriber);
		}
		public static bool parse(IPublishableParser parser, Property_subscriber subscriber)
		{
			parser.parseStructBegin();
			bool changed = false;
			changed = subscriber.update_name(parser, "name") | changed;
			changed = subscriber.update_value(parser, "value") | changed;
			parser.parseStructEnd();
			if(changed)
				subscriber.notifyUpdated();
			return changed;
		}
		public static bool parse(IPublishableParser parser, Property_subscriber subscriber, UInt64[] addr, int offset)
		{
			bool changed = false;
			switch ((Address)addr[offset])
			{
				case Address.name:
				{
					if(addr.Length != offset + 1)
						throw new Exception();
					changed = subscriber.update_name(parser, "value") | changed;
					break;
				}
				case Address.value:
				{
					if(addr.Length != offset + 1)
						throw new Exception();
					changed = subscriber.update_value(parser, "value") | changed;
					break;
				}
				default:
					throw new Exception();
			}
			if(changed)
				subscriber.notifyUpdated();
			return changed;
		}
		public void _reset_handlers()
		{
		}
	} // class Property_subscriber

	public class Property_publisher : IProperty

	{
		IProperty t;
		IPublishableComposer composer;
		UInt64[] address;
		enum Address
		{
			name = 0,
			value = 1
		}
		public Property_publisher(IProperty t, IPublishableComposer composer, UInt64[] address)
		{
			this.t = t;
			this.composer = composer;
			this.address = address;
		}
		public String name
		{
			get { return t.name; }
			set
			{
				t.name = value;
				composer.composeAddress(address, (UInt64)Address.name);
				composer.composeString("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public String value
		{
			get { return t.value; }
			set
			{
				t.value = value;
				composer.composeAddress(address, (UInt64)Address.value);
				composer.composeString("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public bool isEquivalent(IProperty other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return t.isEquivalent(other);
		}
		public static void compose(IPublishableComposer composer, String name, IProperty val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, IProperty t)
		{
			composer.composeStructBegin();
			composer.composeString("name", t.name, true);
			composer.composeString("value", t.value, false);
			composer.composeStructEnd();
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(IProperty data) { this.t = data; }
	} // class Property_publisher

	public interface Ipublishable_sample : IEquivalenceComparable<Ipublishable_sample>
	{
		Int64 id { get; set; }
		String text { get; set; }
		IHtmlTag html { get; set; }
	} // interface publishable_sample

	public class publishable_sample : Ipublishable_sample, IEquatable<publishable_sample>
	{
		public Int64 id { get; set; }
		String _text = String.Empty;
		public String text
		{
			get { return _text; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_text = value;
			}
		}
		HtmlTag _html = new HtmlTag();
		public IHtmlTag html
		{
			get { return _html; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_html = (HtmlTag)value;
			}
		}
		public publishable_sample() { }
		public publishable_sample(Int64 id, String text, IHtmlTag html)
		{
			this.id = id;
			this.text = text;
			this.html = html;
		}
		public override bool Equals(object obj)
		{
			return Equals(obj as publishable_sample);
		}
		public static bool operator ==(publishable_sample left, publishable_sample right)
		{
			if (ReferenceEquals(left, right))
				return true;
			else if (ReferenceEquals(left, null))
				return false;
			else if (ReferenceEquals(null, right))
				return false;
			else
				return left.Equals(right);
		}
		public static bool operator !=(publishable_sample left, publishable_sample right)
		{
			return !(left == right);
		}
		public override int GetHashCode()
		{
			// TODO
			throw new InvalidOperationException();
		}
		public bool Equals(publishable_sample other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.id == other.id &&
					this.text == other.text &&
					this.html.Equals(other.html);
		}
		public bool isEquivalent(Ipublishable_sample other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.id == other.id &&
					this.text == other.text &&
					this.html.isEquivalent(other.html);
		}
	} // class publishable_sample

//**********************************************************************
// PUBLISHABLE publishable_sample (3 parameters)
// 1. INTEGER id
// 2. CHARACTER_STRING text
// 3. STRUCT HtmlTag html
//**********************************************************************

	public class publishable_sample_subscriber : Ipublishable_sample, StateSubscriberBase
	{

		/////////////////////////////////  begin user override section /////////////////////////////////

		public virtual HtmlTag_subscriber makeHandler_html(IHtmlTag data) { return new HtmlTag_subscriber(data); }
		public virtual void notifyFullyUpdated() { }
		public virtual void notifyUpdated() { }
		public virtual void notifyUpdated_id(Int64 old) { }
		public virtual void notifyUpdated_text(String old) { }
		public virtual void notifyUpdated_html() { }

		/////////////////////////////////   end user override section  /////////////////////////////////


		protected Ipublishable_sample _data;
		enum Address
		{
			id = 0,
			text = 1,
			html = 2
		}
		public publishable_sample_subscriber() { this._data = new publishable_sample(); }
		public Int64 id
		{
			get { return this._data.id; }
			set { throw new InvalidOperationException(); }
		}
		bool update_id(IPublishableParser parser, String name)
		{
			Int64 newVal = parser.parseInteger(name);
			if (newVal != this._data.id)
			{
				Int64 oldVal = this._data.id;
				this._data.id = newVal;
				notifyUpdated_id(oldVal);
				return true;
			}
			else
				return false;
		}
		public String text
		{
			get { return this._data.text; }
			set { throw new InvalidOperationException(); }
		}
		bool update_text(IPublishableParser parser, String name)
		{
			String newVal = parser.parseString(name);
			if (newVal != this._data.text)
			{
				String oldVal = this._data.text;
				this._data.text = newVal;
				notifyUpdated_text(oldVal);
				return true;
			}
			else
				return false;
		}
		HtmlTag_subscriber html_handler;
		HtmlTag_subscriber lazy_html_handler()
		{ // mb: lazy because can't call virtual 'makeHandler' in ctor
			if (html_handler == null)
				html_handler = makeHandler_html(this._data.html);
			return html_handler;
		}
		public IHtmlTag html
		{
			get { return lazy_html_handler(); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(Ipublishable_sample other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
		public static void parseForStateSync(IPublishableParser parser, String expectedName, Ipublishable_sample data)
		{
			parser.parseKey(expectedName);
			parseForStateSync(parser, data);
		}
		public static publishable_sample parseForStateSync(IPublishableParser parser)
		{
			publishable_sample data = new publishable_sample();
			parseForStateSync(parser, data);
			return data;
		}
		static void parseForStateSync(IPublishableParser parser, Ipublishable_sample data)
		{
			parser.parseStructBegin();
			data.id = parser.parseInteger("id");
			data.text = parser.parseString("text");
			HtmlTag_subscriber.parseForStateSync(parser, "html", data.html);
			parser.parseStructEnd();
		}
		public static bool parse(IPublishableParser parser, String expectedName, publishable_sample_subscriber subscriber)
		{
			parser.parseKey(expectedName);
			return parse(parser, subscriber);
		}
		public static bool parse_notify(IPublishableParser parser, publishable_sample_subscriber subscriber)
		{
			return parse(parser, subscriber);
		}
		public static bool parse(IPublishableParser parser, publishable_sample_subscriber subscriber)
		{
			parser.parseStructBegin();
			bool changed = false;
			changed = subscriber.update_id(parser, "id") | changed;
			changed = subscriber.update_text(parser, "text") | changed;
			{
				bool currentChanged = HtmlTag_subscriber.parse(parser, "html", subscriber.lazy_html_handler());
				if(currentChanged)
				{
						changed = true;
						subscriber.notifyUpdated_html();
				}
			}
			parser.parseStructEnd();
			if(changed)
				subscriber.notifyUpdated();
			return changed;
		}
		public static bool parse(IPublishableParser parser, publishable_sample_subscriber subscriber, UInt64[] addr, int offset)
		{
			bool changed = false;
			switch ((Address)addr[offset])
			{
				case Address.id:
				{
					if(addr.Length != offset + 1)
						throw new Exception();
					changed = subscriber.update_id(parser, "value") | changed;
					break;
				}
				case Address.text:
				{
					if(addr.Length != offset + 1)
						throw new Exception();
					changed = subscriber.update_text(parser, "value") | changed;
					break;
				}
				case Address.html:
				{
					bool currentChanged = false;
					if(addr.Length == offset + 1) // full element replace
						currentChanged = HtmlTag_subscriber.parse(parser, "value", subscriber.lazy_html_handler());
					else if(addr.Length > offset + 1) // let child continue parsing
						currentChanged = HtmlTag_subscriber.parse(parser, subscriber.lazy_html_handler(), addr, offset + 1);
					else
						throw new Exception();

					if(currentChanged)
					{
						changed = true;
						subscriber.notifyUpdated_html();
					}
					break;
				}
				default:
					throw new Exception();
			}
			if(changed)
				subscriber.notifyUpdated();
			return changed;
		}
		public String stateSubscriberName() { return "publishable_sample"; }
		public UInt64 stateTypeID() { return 11; }
		public void applyMessageWithUpdates(IPublishableParser parser)
		{
			parser.parseStateUpdateMessageBegin();
			UInt64[] addr = null;
			bool changed = false;
			while(parser.parseAddress(ref addr))
			{
				changed = publishable_sample_subscriber.parse(parser, this, addr, 0) | changed;
				parser.parseAddressEnd();
				addr = null;
			}
			parser.parseStateUpdateMessageEnd();
		}
		public void applyStateSyncMessage(IPublishableParser parser)
		{
			publishable_sample val = publishable_sample_subscriber.parseForStateSync(parser);
			this._data = val;
			this._reset_handlers();
			this.notifyFullyUpdated();
		}
		public void _reset_handlers()
		{
			this.html_handler = null;
		}
	} // class publishable_sample_subscriber

	public class publishable_sample_publisher : Ipublishable_sample, StatePublisherBase

	{
		Ipublishable_sample t;
		IPublishableComposer composer;
		UInt64[] address;
		enum Address
		{
			id = 0,
			text = 1,
			html = 2
		}
		public publishable_sample_publisher()
		{
			this.t = new publishable_sample();
			this.composer = null;
			this.address = new UInt64[] { };
		}
		public Int64 id
		{
			get { return t.id; }
			set
			{
				t.id = value;
				composer.composeAddress(address, (UInt64)Address.id);
				composer.composeInteger("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public String text
		{
			get { return t.text; }
			set
			{
				t.text = value;
				composer.composeAddress(address, (UInt64)Address.text);
				composer.composeString("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public IHtmlTag html
		{
			get { return new HtmlTag_publisher(t.html, composer, Publishable.makeAddress(address, (UInt64)Address.html)); }
			set
			{
				t.html = value;
				composer.composeAddress(address, (UInt64)Address.html);
				HtmlTag_publisher.compose(composer, "value", value, false);
				composer.composeAddressEnd();
			}
		}
		public bool isEquivalent(Ipublishable_sample other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return t.isEquivalent(other);
		}
		public static void compose(IPublishableComposer composer, String name, Ipublishable_sample val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, Ipublishable_sample t)
		{
			composer.composeStructBegin();
			composer.composeInteger("id", t.id, true);
			composer.composeString("text", t.text, true);
			HtmlTag_publisher.compose(composer, "html", t.html, false);
			composer.composeStructEnd();
		}
		public int idx { get; set; } // for use in pools, etc
		public String statePublisherName() { return "publishable_sample"; }
		public UInt64 stateTypeID() { return 11; }
		public void generateStateSyncMessage(IPublishableComposer composer)
		{
			publishable_sample_publisher.compose(composer, this.t);
		}
		public void startTick(IPublishableComposer composer)
		{
			this.composer = composer;
			composer.composeStateUpdateMessageBegin();
		}
		public IPublishableComposer endTick()
		{
			composer.composeStateUpdateMessageEnd();
			IPublishableComposer tmp = composer;
			this.composer = null;
			return tmp;
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(Ipublishable_sample data) { this.t = data; }
	} // class publishable_sample_publisher

	public class publishable_sample_concentrator : publishable_sample_subscriber, StateConcentratorBase
	{
		public static void compose(IPublishableComposer composer, String name, Ipublishable_sample val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, Ipublishable_sample t)
		{
			composer.composeStructBegin();
			composer.composeInteger("id", t.id, true);
			composer.composeString("text", t.text, true);
			HtmlTag_publisher.compose(composer, "html", t.html, false);
			composer.composeStructEnd();
		}
		public void generateStateSyncMessage(IPublishableComposer composer)
		{
			publishable_sample_publisher.compose(composer, this._data);
		}
	} // class publishable_sample_concentrator

	public class StateConcentratorFactory : IStateConcentratorFactory
	{
		public StateConcentratorBase createConcentrator(UInt64 typeID)
		{
			switch(typeID)
			{
			case 11:
				return new publishable_sample_concentrator();
			default:
				return null;
			}
		}
	} // class StateConcentratorFactory


} // namespace basic_test

